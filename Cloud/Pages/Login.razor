@page "/login"
@using Cloud.Data
@using Microsoft.Extensions.Logging
@using System.Runtime.InteropServices
@inject ILogger<Index> Logger
@{
if (Static.Client != null)
    {
        Static.Client.OnNotificationAction = OnNotificationAction;
        Static.Client.OnLocalSyncStatusChangesAction = OnLocalSyncStatusChanges;
        Static.Client.OnCommunicationErrorEvent = OnCommunicationErrorEvent;
        OnLocalSyncStatusChanges(Static.Client.SyncStatus, Static.Client.PendingFiles);
    }
    else if (String.IsNullOrEmpty(CloudClient.QrCodeDetector.QrDetected))
    {
        CloudClient.QrCodeDetector.DetectQrCode((qr) => { Refresh(); });
    }
}
<PageTitle>Cloud client</PageTitle>

<h1>Cloud</h1>
<h3>Welcome to your Cloud Client Panel</h3>

@if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !Static.IsAdmin)
{
    <div class="alert alert-danger" role="alert">
        For correct operation, the application must be run as an administrator.<br />
        The role is required to keep the system date up to date and to generate hard links during backup.
    </div>
}

@if (Static.Client != null)
{
    <button class="btn btn-primary my-3" @onclick="Logout">Logout</button>
    var ETA = Static.Client?.Sync?.SyncETA();
    if (ETA != DateTime.MinValue && ETA is DateTime eta)
    {
        <div class="alert alert-info" role="alert">
            ETA = @eta.ToLocalTime().ToString("g");
        </div>
    }
}
else if (!HideForm)
{
    <button class="btn btn-primary my-3" @onclick="Exit">Exit</button>

    <SurveyPrompt Title="Connection to the cloud server" />

    <EditForm Model="@loginModel" autocomplete="off" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="QR">QR code</label>
        <InputText id="QR" class="form-control" @bind-Value="loginModel.QR" />

        <label for="Pin">Pin or passphrase to restore account</label>
        <InputText id="Pin" style="text-security:disc; -webkit-text-security:disc;" class="form-control" @bind-Value="loginModel.Pin" />

        <button class="btn btn-primary my-3" type="submit">Submit</button>

    </EditForm>
}
@if (ErrorCommunicationTime.AddMinutes(1) >= DateTime.UtcNow)
{
    <div class="alert alert-danger" role="alert">
        @ErrorCommunication;
    </div>
}
@{
    string? alert = null;
    if (LoginResult == CloudClient.Client.LoginResult.WrongQR)
        alert = "Wrong QR code: This is not a valid code for this application!";
    else if (LoginResult == CloudClient.Client.LoginResult.WrongPassword)
        alert = "Wrong pin!";
    else if (LoginResult == CloudClient.Client.LoginResult.RemoteHostNotReachable)
        alert = "The cloud is unreachable: Is the cloud active and connected to a stable internet line?";
    else if (LoginResult == CloudClient.Client.LoginResult.LicenseExpired)
        alert = "Connection refused: Check if the license has expired!";
    if (alert != null)
    {
        <div class="alert alert-danger" role="alert">
            @alert
        </div>
    }
    if (Notification != null)
    {
        <div class="alert @NotificationColor" role="alert">
            Cloud notification: <strong>@Notification</strong>
        </div>
    }
    if (SyncStatus != null)
    {
        <div class="alert @localSyncStatusColor" role="alert">
            Local sync status: <strong>@SyncStatus</strong>
        </div>
    }
}
@* <br />
    <label id="Notification" class="card" style="background-color: @NotificationColor">@Notification</label>
    <br />

    <br />
    <label id="SyncStatus" class="card" style="background-color: @localSyncStatusColor">@SyncStatus</label>
    <br /> *@


<pre>@Status</pre>

<br />

<style>
    .e-input-eye:before {
        content: '\01F441';
        /*        font-family: e-icons; */
        font-size: 32px;
    }
</style>


@functions {
    void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private void Logout()
    {
        Static.Logout();
        HideForm = false;
    }

    private void Exit()
    {
        Environment.Exit(0);
    }

    bool RefreshStatus()
    {
        OldStatus = Status;
        Status = Static.Client?.Status;
        if (Status != OldStatus)
        {
            Refresh();
        }
        return true;
    }

    System.Threading.Timer timer;

    void StartRefreshStatus()
    {
        timer = new System.Threading.Timer((object? state) =>
        {
            RefreshStatus();
        }, null, 1000, 1000);
    }

    private LoginModel loginModel = new();

    void OnNotificationAction(ulong? fromUserId, CloudSync.Sync.Notice notice)
    {
        Notification = notice.ToString();
        if (notice == CloudSync.Sync.Notice.LoginError)
        {
            NotificationColor = "danger";
        }
        else if (notice == CloudSync.Sync.Notice.Authentication || notice == CloudSync.Sync.Notice.LoggedOut)
            NotificationColor = "alert-warning";
        else
        {
            NotificationColor = "alert-success";
        }
    }

    void OnLocalSyncStatusChanges(CloudSync.Sync.SyncStatus localSyncStatus, int pendingFiles)
    {
        SyncStatus = localSyncStatus.ToString();
        if (localSyncStatus == CloudSync.Sync.SyncStatus.Monitoring)
        {
            localSyncStatusColor = "alert-success";
        }
        else
        {
            localSyncStatusColor = "alert-primary";
        }
    }

    void OnCommunicationErrorEvent(CommunicationChannel.Channel.ErrorType errorId, string description)
    {
        ErrorCommunicationTime = DateTime.UtcNow;
        ErrorCommunication = errorId.ToString() + " (" + description + ")";
        Static.Client?.AddFileError(ErrorCommunication, null);
    }

}

@code {
    public Login()
    {
        Status = Static.Client == null ? null : Static.Client.Status;
        StartRefreshStatus();
    }
    string? Status;
    string? OldStatus;
    static CloudClient.Client.LoginResult LoginResult;
    bool HideForm;
    static string? Notification;
    static string? NotificationColor;

    static string? SyncStatus;
    static string? localSyncStatusColor;

    static string? ErrorCommunication;
    static DateTime ErrorCommunicationTime;

    string TxtType = "password";

    private void HandleValidSubmit(EditContext editContext)
    {
        Status = null;
        Notification = null;
        SyncStatus = null;
        LoginResult = CloudClient.Client.LoginResult.Successful; // reset previous login message
        InvokeAsync(StateHasChanged);
        System.Threading.Tasks.Task.Run(() =>
        {
            var form = editContext.Model as Cloud.Data.LoginModel;
            var qr = form.QR;
            var pin = form.Pin.Trim();
            HideForm = true;
            InvokeAsync(StateHasChanged);
            if (pin.Contains(' '))
            {
                var passphrase = pin;
                LoginResult = Static.Restore(qr, passphrase);
            }
            else
            {
                LoginResult = Static.Login(qr, pin);
            }
            if (LoginResult != CloudClient.Client.LoginResult.Successful)
                Logout();
            // HideForm = false;
            InvokeAsync(StateHasChanged);
        });
    }
}

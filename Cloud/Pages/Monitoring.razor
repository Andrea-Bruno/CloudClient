@page "/monitoring"

<PageTitle>Monitoring</PageTitle>

@using Cloud.Data

<h1>Synchronization progression</h1>

<p>Monitoring of cloud synchronization operations.</p>

@if (CloudClient == null)
{
    <p><em>Waiting for connection...</em></p>
}
else
{
    var pendingOperations = @Static.Client?.Sync?.PendingOperations;
    if (pendingOperations != null && pendingOperations != 0)
    {
        <div class="alert alert-info" role="alert">
            PendingOperations: <strong>@pendingOperations</strong>
        </div>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Sec.</th>
                <th>Command</th>
                <th>Direction</th>
                <th>Info</th>
            </tr>
        </thead>
        <tbody>
            @lock (CloudClient.OnCommands)
            {
                foreach (var onCommand in CloudClient.OnCommands.ToArray())
                {
                    var infoData = onCommand.InfoData;
                    if (infoData?.Length > 50)
                    {
                        infoData = "..." + infoData[^50..];
                    }
                    <tr>
                        <td>@Math.Round(((DateTime.UtcNow - onCommand.Time).TotalSeconds))</td>
                        <td>@(onCommand.Command.ToString())</td>
                        <td>@(onCommand.IsOutput ? "Out" : "In")</td>
                        <td>@infoData</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Operation</th>
                <th>Name</th>
                <th>Hash</th>
                <th>Part</th>
                <th>Length</th>
                <th>Completed</th>
            </tr>
        </thead>
        <tbody>
            @lock (CloudClient.TransferredFiles)
            {
                foreach (var file in CloudClient.TransferredFiles.OrderBy(x => x?.Completed))
                {
                    <tr>
                        <td>@(file.TransferLaberl)</td>
                        <td>@file.Name</td>
                        <td>@file.Hash</td>
                        <td>@(file.Part + "/" + file.Total + "#") </td>
                        <td>@file.Length</td>
                        <td>@file.Completed</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
@functions {
    void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }
}
@code {

    private CloudBox.CloudBox CloudClient = CloudBox.CloudBox.LastInstance;
    protected override async Task OnInitializedAsync()
    {
        if (CloudClient != null)
        {
            CloudClient.TransferredFiles.OnUpdated = (int idx) => { Refresh(); }; // Action that works like an event that is triggered when the list needs to be updated
            CloudClient.OnCommands.PreservedElement = 6;
            CloudClient.OnCommands.OnCommandEvent = (ulong? userId, CloudSync.Sync.Commands command, string? infoData, bool isOutput) => { Refresh(); };
        }
    }
}

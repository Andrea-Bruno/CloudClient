@page "/backup"

<PageTitle>Backup</PageTitle>
<h1>Backup settings</h1>
@{
    BackupManager.Alert = SetAlert;
}

@if (Alert != null)
{
    <div class="alert alert-warning">
        <strong>Warning!</strong>@Alert
    </div>
    <button type="button" class="btn btn-primary" @onclick="() => Alert = null">Reset alert</button>
}

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Source</span>
    </div>
    <input type="text" value="@BackupManager.Source" readonly class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>

<SurveyPrompt Title="Select a valid location for the backup (you must select a different disk than the main one, to allow recovery in case of hardware failure)" />
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Target</span>
    </div>
    <input type="text" @onchange="@OnTargetChange" value="@BackupManager.Target" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>

<SurveyPrompt Title="Network or local path of the archive synchronized in real time (redundant copy). If multiple machines connect to the same Git repository, a sophisticated merge algorithm will synchronize the changes to the documents." />
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Git</span>
    </div>
    <input type="text" @onchange="@OnGitChange" value="@BackupManager.Git" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>

<button type="button" class="btn btn-primary" @onclick="StartBackup">Start Backup</button>
<div>@StartOutcome</div>

<div class="alert alert-primary my-3" role="alert">
    If the application is running, daily backups will still be performed automatically.
</div>

@functions {
    static void OnTargetChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            BackupManager.Target = value;
        }
    }
    static void OnGitChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            BackupManager.Target = value;
        }
    }
    static void StartBackup()
    {
        StartOutcome = BackupManager.StartBackup();
    }
    static void SetAlert(string text)
    {
        Alert = text;
    }
}


@code {
    static string? Alert = null;
    static string? StartOutcome;
}


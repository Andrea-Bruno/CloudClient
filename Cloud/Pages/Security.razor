@page "/security"
@{
    var buttonLabel = Blocked ? "Unblock access to files" : "Lock and hide files";
}

<PageTitle>Security</PageTitle>

<h1>Security</h1>
<h3>Securely block access to all files in the cloud from this pc</h3>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <label class="input-group-text" for="CloudPath">Cloud path</label>
    </div>
    <input id="CloudPath" readonly class="form-control @vp" value="@Cloud.Static.CloudPath" />
</div>

@if (!string.IsNullOrEmpty(BackupManager.Target))
{
    <div class="alert alert-success my-3" role="alert">
        It is not possible to close the cloud area with a password if the backup operations are active! In terms of privacy, it makes no sense to deny access to this area and have a copy accessible in the backup area!
    </div>
}
else
{
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <label class="input-group-text" for="Password">Password</label>
        </div>
        <input id="Password" style="text-security:disc; -webkit-text-security:disc;" class="form-control @vp" @bind="Password" @oninput=OnPasswordChange />
    </div>
    @if (!Blocked)
    {
        <div class="progress mb-3">
            <div class="progress-bar @(percolor)" role="progressbar" style="width: @(per)%" aria-valuenow="@per" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="RepeatPassword">Repeat password</label>
            </div>
            <input id="RepeatPassword" style="text-security:disc; -webkit-text-security:disc;" class="form-control @vr" @bind="RepeatPassword" @oninput=OnRepeatChange />
        </div>
    }
    <button class="btn btn-primary my-3" disabled="@(!ButtonEnabled)" @onclick="@ButtonClick">@buttonLabel</button>
    @if (OperationInProgress)
    {
        <div class="alert alert-info" role="alert">
            <strong>Operation in progress:</strong> Please wait!
        </div>
    }
    @if (Notification != null)
    {
        <div class=" 5s alert @NotificationStyle" role="alert">
            <strong>Notify:</strong> @Notification
        </div>
    }
}

@if (attempts >= 5)
{
    <div>
        <button class="btn btn-danger my-3" @onclick="@DestroyLocalData">Destroy all local data</button>
        <div class="alert alert-warning" role="alert">
            <strong>warning:</strong> The destruction of all local data will be irreversible!
        </div>
    </div>
}

@functions {
    void DestroyLocalData()
    {
        var fileinfo = new FileInfo(Static.VirtualDiskFullFileName);
        foreach (var file in fileinfo.Directory.GetFiles(Path.GetFileNameWithoutExtension(fileinfo.Name) + ".*"))
        {
            try
            {
                file.Delete();
            }
            catch (Exception) { }
        }
        var cloudPath = new DirectoryInfo(Static.CloudPath);
        if (cloudPath.Exists && cloudPath.LinkTarget != null)
            cloudPath.Delete();

        SystemExtra.Util.CreateVirtualDisk(Static.VirtualDiskFullFileName, Static.CloudPath, true);
        Static.Client?.Sync?.ResetCacheHashFileTable();    
        Static.Client?.IsReachableDiskStateIsChanged(SystemExtra.Util.IsMounted(Static.CloudPath, out bool _));
        attempts = 0;
    }
    void ButtonClick()
    {
        Notification = null;
        OperationInProgress = true;
        InvokeAsync(StateHasChanged);
        System.Threading.Tasks.Task.Run(() =>
        {
            if (Blocked)
            {
                Static.MountVirtualDisk(Password, out string? error);
                if (error != null)
                {
                    vp = "is-invalid";
                    NotificationStyle = "alert-danger";
                    Notification = error;
                    attempts++;
                }
                else
                {
                    vp = null;
                    NotificationStyle = "alert-success";
                    Notification = "File access has been re-enabled";
                    attempts = 0;
                }
            }
            else
            {
                if (Password == null || Password.Length < chrs)
                    return;
                Static.UnmountVirtualDisk(Password, out string? error);
                if (error != null)
                {
                    NotificationStyle = "alert-danger";
                    Notification = error;
                }
                else
                {
                    NotificationStyle = "alert-success";
                    Notification = "File area locked! Use the password to access the files again.";
                }
            }
            OperationInProgress = false;
            Reload();
        });
    }

    void OnPasswordChange(ChangeEventArgs args)
    {
        Password = (string)args.Value;
        if (Blocked)
        {
            ButtonEnabled = Password.Length >= chrs;
        }
        else
        {
            ButtonEnabled = Password == RepeatPassword && Password.Length >= chrs;
            vp = Password.Length < chrs ? "is-invalid" : "is-valid";
            per = (int)(((double)Password.Length / chrs) * 100);
            if (per > 100)
                per = 100;
            if (per < 50)
                percolor = "bg-danger";
            else if (per < 100)
                percolor = "bg-warning";
            else
                percolor = "bg-success";
        }
    }

    void OnRepeatChange(ChangeEventArgs args)
    {
        RepeatPassword = (string)args.Value;
        ButtonEnabled = Password == RepeatPassword && Password.Length >= chrs;
        vr = RepeatPassword != Password ? "is-invalid" : "is-valid";
    }
    void Reload()
    {
        Blocked = !Static.VirtualDiskIsMounted;
        per = 0;
        percolor = null;
        vp = null;
        vr = null;
        ButtonEnabled = false;
        Password = null;
        RepeatPassword = null;
        InvokeAsync(StateHasChanged);
    }
}

@code {
    private int attempts = 0;
    const int chrs = 8;
    private bool OperationInProgress;
    private int per;
    private string? percolor = null;
    private string? vp = null;
    private string? vr = null;
    private bool ButtonEnabled;
    private bool Blocked = !Static.VirtualDiskIsMounted;
    private string? Password;
    private string? RepeatPassword;
    private string? Notification;
    private string? NotificationStyle;
}

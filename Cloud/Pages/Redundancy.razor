@page "/redundancy"

<PageTitle>Network mirroring</PageTitle>
<h1>Network mirroring</h1>
<h3>Real-time redundant cloud data</h3>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Source</span>
    </div>
    <input type="text" value="@BackupManager.Source" readonly class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>

<SurveyPrompt Title="Network or local path of the archive synchronized in real time (redundant copy). If multiple machines connect to the same network path repository, a sophisticated merge algorithm will synchronize the changes to the documents. This network mirroring feature is also a disaster recovery tool and protects against data loss if the machine is stolen." />
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Network path</span>
    </div>
    <input type="text" @onchange="@OnGitChange" value="@BackupManager.Git" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>

@{
    BackupManager.AntiGitAlertAction = SetAlert;
}
@if (Alert != null)
{
        <div class="alert alert-warning">
            <strong>Warning! </strong>@Alert
        </div>
        <button type="button" class="btn btn-primary" @onclick="() => Alert = null">Reset alert</button>
}

@*<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroup-sizing-default">Current user</span>
    </div>
    <input type="text" value="@Environment.UserName" readonly class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default">
</div>
*@
@functions {
    static void OnGitChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            BackupManager.Git = value;
        }
    }
     void SetAlert(Exception Ex)
    {
        Alert = Ex == null ? null : Ex.Message;
        InvokeAsync(StateHasChanged);
    }
}


@code {
    static string? Alert = BackupManager.AntiGitAlert;
}
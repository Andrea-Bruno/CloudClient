@page "/login"
@using Microsoft.Extensions.Logging
@using System.Runtime.InteropServices
@inject ILogger<Index> Logger
@{
    if (Static.Client != null)
    {
        Static.Client.OnNotificationAction = OnNotificationAction;
        Static.Client.OnLocalSyncStatusChangesAction = OnLocalSyncStatusChanges;
        Static.Client.OnCommunicationErrorEvent = OnCommunicationErrorEvent;
        OnLocalSyncStatusChanges(Static.Client.SyncStatus, Static.Client.PendingFiles);
    }
    else if (String.IsNullOrEmpty(CloudClient.QrCodeDetector.QrDetected))
    {
        CloudClient.QrCodeDetector.DetectQrCode((qr) => { Refresh(); });
    }
    if (string.IsNullOrEmpty(QR))
    {
        QR = CloudClient.QrCodeDetector.QrDetected;
    }
    if (string.IsNullOrEmpty(QR))
    {
        QR = Static.Storage.Values.Get("qrEncrypted", null);
    }
    if (string.IsNullOrEmpty(Pin))
    {
        Pin = NewPin;
    }
    if (string.IsNullOrEmpty(Pin))
    {
        Pin = System.Diagnostics.Debugger.IsAttached ? "777777" : "";
    }
    if (!UseMyPassphrase && string.IsNullOrEmpty(Passphrase))
    {
        var mnemonic = new NBitcoin.Mnemonic(NBitcoin.Wordlist.English, NBitcoin.WordCount.TwentyFour);
        Passphrase = mnemonic.ToString();
    }
}
<PageTitle>Cloud client</PageTitle>

<h1>Cloud</h1>
<h3>Welcome to your Cloud Client Panel</h3>

@if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !Static.IsAdmin)
{
    <div class="alert alert-danger" role="alert">
        For correct operation, the application must be run as an administrator.<br />
        The role is required to keep the system date up to date and to generate hard links during backup.
    </div>
}

@if (Static.Client != null && !LoginIsRunning)
{
    <button class="btn btn-primary my-3" @onclick="Logout">Logout</button>
    var ETA = Static.Client?.Sync?.ClientToolkit?.SyncETA();
    if (ETA != DateTime.MinValue && ETA is DateTime eta)
    {
        <div class="alert alert-info" role="alert">
            ETA = @eta.ToLocalTime().ToString("g");
        </div>
    }
}
else if (!LoginIsRunning)
{
    <div class="form-check my-2">
        <p>Create an anonymous account on our cloud with just one click (no personal data required)</p>
        <input class="form-check-input" type="checkbox" id="TermsAccepted" @bind="TermsAccepted">
        <label class="form-check-label" for="TermsAccepted">
            I accept the <a class="link-primary link-underline" style="cursor:pointer;" @onclick="() => ShowTermsModal = true">terms and conditions</a> of the service.
        </label>
    </div>
    <button class="btn btn-primary my-3" @onclick="CreateNewAccount" disabled="@(TermsAccepted == false)">
        Create anonymous account
    </button>


    @if (ShowTermsModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Terms and Conditions of Use</h5>
                        <button type="button" class="btn-close" @onclick="() => ShowTermsModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            We are focused on creating high-tech cybersecurity services, and this project falls within this scope. <br />
                            The service is offered as is, without any liability. The open-source code shows how synchronizations occur; it is up to the user to check for any bugs. The service may be discontinued at any time without notice, and the data in the cloud may be lost. Users subject to legislation whose use or the service as offered violates the terms of the law are not authorized to use the service.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="() => ShowTermsModal = false">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <h2>Connect to the cloud server</h2>

    <label for="QR">QR code</label>
    <input type="text" id="QR" class="form-control" @bind="QR" />

    <label for="Pin">Pin/2FA</label>
    <input type="text" id="Pin" style="text-security:disc; -webkit-text-security:disc;" class="form-control" @bind="Pin" />

    if (System.Diagnostics.Debugger.IsAttached)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="ZeroKnowledge" @bind="passphraseShow">
            <label class="form-check-label" for="ZeroKnowledge">
                By enabling zero knowledge encryption, your cloud-side data will be encrypted with a passphrase that only you have.
            </label>
        </div>


        if (passphraseShow)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="UseMyPassphrase" @bind="UseMyPassphrase">
                <label class="form-check-label" for="UseMyPassphrase">
                    I already have a passphrase.
                </label>
            </div>


            <div contenteditable="true" aria-multiline="true">
                <label for="Passphrase">Passphrase (important: A different setting than the one you used for the first time will prevent you from logging into the cloud!)</label>
                <textarea id="Passphrase" rows="3" class="form-control" @bind="Passphrase" />
            </div>
        }

    }
    <button class="btn btn-primary my-3" type="submit" @onclick="HandleValidSubmit">Submit</button>
}
@if (ErrorCommunicationTime.AddMinutes(1) >= DateTime.UtcNow)
{
    <div class="alert alert-danger" role="alert">
        @ErrorCommunication;
    </div>
}
@{
    string? alert = null;
    if (LoginResult == CloudClient.Client.LoginResult.WrongQR)
        alert = "Wrong QR code: This is not a valid code for this application!";
    else if (LoginResult == CloudClient.Client.LoginResult.WrongPassword)
        alert = "Wrong pin or passphrase!";
    else if (LoginResult == CloudClient.Client.LoginResult.RemoteHostNotReachable)
        alert = "The cloud is unreachable: Is the cloud active and connected to a stable Internet line?";
    else if (LoginResult == CloudClient.Client.LoginResult.LicenseExpired)
        alert = "Connection refused: Check if the license has expired!";
    else if (customAlert != null)
    {
        alert = customAlert;
        customAlert = null;
    }
    if (alert != null)
    {
        <div class="alert alert-danger" role="alert">
            @alert
        </div>
    }
    if (Notification != null)
    {
        <div class="alert @NotificationColor" role="alert">
            Cloud notification: <strong>@Notification</strong>
        </div>
    }
    if (SyncStatus != null)
    {
        <div class="alert @localSyncStatusColor" role="alert">
            Local sync status: <strong>@SyncStatus</strong>
        </div>
    }
}
@* <br />
    <label id="Notification" class="card" style="background-color: @NotificationColor">@Notification</label>
    <br />

    <br />
    <label id="SyncStatus" class="card" style="background-color: @localSyncStatusColor">@SyncStatus</label>
    <br /> *@


<pre>@Status</pre>

<br />

<style>
    .e-input-eye:before {
        content: '\01F441';
        /*        font-family: e-icons; */
        font-size: 32px;
    }
</style>


@functions {
    void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private void Logout()
    {
        Static.Logout();
    }

    private async Task CreateNewAccount()
    {
        var schema = Static.EntryPoint == "127.0.0.1" ? "http://" : "https://";
        var port = Static.EntryPoint == "127.0.0.1" ? ":5001" : null;
        var entryPoint = schema + Static.EntryPoint + port + "/api";
        var api = new API.CloudServerWebUIApiCommandsClient(entryPoint);
        var result = await api.CreateNewSubscription(50, 90);
        var pin = result.RootElement.GetProperty("Pin").GetString();
        var idHex = result.RootElement.GetProperty("IdHex").GetString();
        var qrEncrypted = result.RootElement.GetProperty("QrEncrypted").GetString();
        var cloudId = result.RootElement.GetProperty("CloudId").GetUInt64();

        Static.Storage.Values.Set(nameof(idHex), idHex);
        Static.Storage.Values.Set(nameof(qrEncrypted), qrEncrypted);
        Static.Storage.Values.Set(nameof(cloudId), cloudId);


        // Static.CreateNewAccount();
        // Refresh();
    }

    bool RefreshStatus()
    {
        OldStatus = Status;
        Status = Static.Client?.Status;
        if (Status != OldStatus)
        {
            Refresh();
        }
        return true;
    }

    System.Threading.Timer timer;

    void StartRefreshStatus()
    {
        timer = new System.Threading.Timer((object? state) => { RefreshStatus(); }, null, 1000, 1000);
    }

    void OnNotificationAction(ulong? fromUserId, CloudSync.Sync.Notice notice)
    {
        Notification = notice.ToString();
        if (notice == CloudSync.Sync.Notice.LoginError)
        {
            NotificationColor = "danger";
        }
        else if (notice == CloudSync.Sync.Notice.Authentication || notice == CloudSync.Sync.Notice.LoggedOut)
            NotificationColor = "alert-warning";
        else
        {
            NotificationColor = "alert-success";
        }
    }

    void OnLocalSyncStatusChanges(CloudSync.Sync.SyncStatus localSyncStatus, int pendingFiles)
    {
        SyncStatus = localSyncStatus.ToString();
        if (localSyncStatus == CloudSync.Sync.SyncStatus.Monitoring)
        {
            localSyncStatusColor = "alert-success";
        }
        else
        {
            localSyncStatusColor = "alert-primary";
        }
    }

    void OnCommunicationErrorEvent(CommunicationChannel.Channel.ErrorType errorId, string description)
    {
        ErrorCommunicationTime = DateTime.UtcNow;
        ErrorCommunication = errorId.ToString() + " (" + description + ")";
        Static.Client?.AddFileError(ErrorCommunication, null);
    }
}

@code {
    public Login()
    {
        Status = Static.Client == null ? null : Static.Client.Status;
        StartRefreshStatus();
    }
    public bool TermsAccepted { get; set; } = false;
    public bool ShowTermsModal { get; set; } = false;
    string? Status;
    string? OldStatus;
    static CloudClient.Client.LoginResult LoginResult;
    static bool LoginIsRunning;
    static string? Notification;
    static string? NotificationColor;
    static string? SyncStatus;
    static string? localSyncStatusColor;

    static string? ErrorCommunication;
    static DateTime ErrorCommunicationTime;

    string TxtType = "password";

    public bool passphraseShow { get; set; }
    public bool UseMyPassphrase { get; set; } = true;

    public string QR { get; set; } //   CloudClient.QrCodeDetector.QrDetected;
    public string Pin { get; set; } // System.Diagnostics.Debugger.IsAttached ? "777777" : "";
    public static string NewPin { get; set; } // The pin that was generated when you created a new account
    public string Passphrase { get; set; }
    string? customAlert { get; set; }

    private void HandleValidSubmit()
    {
        byte[]? zeroKnowledgeEncryptionMasterKey = null;
        if (passphraseShow && !string.IsNullOrEmpty(Passphrase))
        {
            try
            {
                var key = Static.GenerateKeyFromPassphrase(Passphrase);
                zeroKnowledgeEncryptionMasterKey = key.PrivateKey.ToBytes();
            }
            catch (Exception)
            {
                customAlert = "Invalid passphrase!";
                // InvokeAsync(StateHasChanged);
                return;
            }
        }
        Status = null;
        Notification = null;
        SyncStatus = null;
        LoginResult = CloudClient.Client.LoginResult.Successful; // reset previous login message
        InvokeAsync(StateHasChanged);
        System.Threading.Tasks.Task.Run(() =>
        {
            var pin = Pin.Trim();
            LoginIsRunning = true;
            InvokeAsync(StateHasChanged);
            if (pin.Contains(' '))
            {
                var passphrase = pin;
                LoginResult = Static.Restore(QR, passphrase);
            }
            else
            {
                LoginResult = Static.Login(QR, pin, zeroKnowledgeEncryptionMasterKey);
            }
            if (LoginResult != CloudClient.Client.LoginResult.Successful)
                Logout();
            LoginIsRunning = false;
            InvokeAsync(StateHasChanged);
        });
    }
}


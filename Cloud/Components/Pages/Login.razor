@page "/login"
@using Microsoft.Extensions.Logging
@using System.Runtime.InteropServices
@inject ILogger<Index> Logger
@{
    if (Static.Client != null)
    {
        Static.Client.OnNotificationAction = OnNotificationAction;
        Static.Client.OnLocalSyncStatusChangesAction = OnLocalSyncStatusChanges;
        Static.Client.OnCommunicationErrorEvent = OnCommunicationErrorEvent;
        OnLocalSyncStatusChanges(Static.Client.SyncStatus, Static.Client.PendingFiles);
    }
    else if (String.IsNullOrEmpty(CloudClient.QrCodeDetector.QrDetected))
    {
        CloudClient.QrCodeDetector.DetectQrCode((qr) => { Refresh(); });
    }
    if (string.IsNullOrEmpty(QR))
    {
        QR = CloudClient.QrCodeDetector.QrDetected;
    }
    if (string.IsNullOrEmpty(Pin)){
        Pin = System.Diagnostics.Debugger.IsAttached ? "777777" : "";
    }
    if (!UseMyPassphrase && string.IsNullOrEmpty(Passphrase))
    {
        var mnemonic = new NBitcoin.Mnemonic(NBitcoin.Wordlist.English, NBitcoin.WordCount.TwentyFour);
        Passphrase = mnemonic.ToString();
    }
}
<PageTitle>Cloud client</PageTitle>

<h1>Cloud</h1>
<h3>Welcome to your Cloud Client Panel</h3>

@if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !Static.IsAdmin)
{
    <div class="alert alert-danger" role="alert">
        For correct operation, the application must be run as an administrator.<br />
        The role is required to keep the system date up to date and to generate hard links during backup.
    </div>
}

@if (Static.Client != null && !LoginIsRunning)
{
    <button class="btn btn-primary my-3" @onclick="Logout">Logout</button>
    var ETA = Static.Client?.Sync?.ClientToolkit?.SyncETA();
    if (ETA != DateTime.MinValue && ETA is DateTime eta)
    {
        <div class="alert alert-info" role="alert">
            ETA = @eta.ToLocalTime().ToString("g");
        </div>
    }
}
else if (!LoginIsRunning)
{
    <button class="btn btn-primary my-3" @onclick="Exit">Exit</button>

    <h2>Connect to the cloud server</h2>

    <label for="QR">QR code</label>
    <input type="text" id="QR" class="form-control" @bind="QR" />

    <label for="Pin">Pin/2FA or passphrase to restore account</label>
    <input type="text" id="Pin" style="text-security:disc; -webkit-text-security:disc;" class="form-control" @bind="Pin" />

    if (System.Diagnostics.Debugger.IsAttached)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="ZeroKnowledge" @bind="passphraseShow">
            <label class="form-check-label" for="ZeroKnowledge">
                By enabling zero knowledge encryption, your cloud-side data will be encrypted with a passphrase that only you have.
            </label>
        </div>


        if (passphraseShow)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="UseMyPassphrase" @bind="UseMyPassphrase">
                <label class="form-check-label" for="UseMyPassphrase">
                    I already have a passphrase.
                </label>
            </div>


            <div contenteditable="true" aria-multiline="true">
                <label for="Passphrase">Passphrase (important: A different setting than the one you used for the first time will prevent you from logging into the cloud!)</label>
                <textarea id="Passphrase" rows="3" class="form-control" @bind="Passphrase" />
            </div>
        }

    }
    <button class="btn btn-primary my-3" type="submit" @onclick="HandleValidSubmit">Submit</button>
}
@if (ErrorCommunicationTime.AddMinutes(1) >= DateTime.UtcNow)
{
    <div class="alert alert-danger" role="alert">
        @ErrorCommunication;
    </div>
}
@{
    string? alert = null;
    if (LoginResult == CloudClient.Client.LoginResult.WrongQR)
        alert = "Wrong QR code: This is not a valid code for this application!";
    else if (LoginResult == CloudClient.Client.LoginResult.WrongPassword)
        alert = "Wrong pin or passphrase!";
    else if (LoginResult == CloudClient.Client.LoginResult.RemoteHostNotReachable)
        alert = "The cloud is unreachable: Is the cloud active and connected to a stable Internet line?";
    else if (LoginResult == CloudClient.Client.LoginResult.LicenseExpired)
        alert = "Connection refused: Check if the license has expired!";
    else if (customAlert != null){
        alert = customAlert;
        customAlert = null;
    }
    if (alert != null)
    {
        <div class="alert alert-danger" role="alert">
            @alert
        </div>
    }
    if (Notification != null)
    {
        <div class="alert @NotificationColor" role="alert">
            Cloud notification: <strong>@Notification</strong>
        </div>
    }
    if (SyncStatus != null)
    {
        <div class="alert @localSyncStatusColor" role="alert">
            Local sync status: <strong>@SyncStatus</strong>
        </div>
    }
}
@* <br />
    <label id="Notification" class="card" style="background-color: @NotificationColor">@Notification</label>
    <br />

    <br />
    <label id="SyncStatus" class="card" style="background-color: @localSyncStatusColor">@SyncStatus</label>
    <br /> *@


<pre>@Status</pre>

<br />

<style>
    .e-input-eye:before {
    content: '\01F441';
    /*        font-family: e-icons; */
    font-size: 32px;
    }
</style>


@functions {
    void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private void Logout()
    {
        Static.Logout();
    }

    private void Exit()
    {
        CloudSync.Util.DisallowRestartApplicationOnEnd = false;
        Environment.Exit(0);
    }

    bool RefreshStatus()
    {
        OldStatus = Status;
        Status = Static.Client?.Status;
        if (Status != OldStatus)
        {
            Refresh();
        }
        return true;
    }

    System.Threading.Timer timer;

    void StartRefreshStatus()
    {
        timer = new System.Threading.Timer((object? state) => { RefreshStatus(); }, null, 1000, 1000);
    }

    void OnNotificationAction(ulong? fromUserId, CloudSync.Sync.Notice notice)
    {
        Notification = notice.ToString();
        if (notice == CloudSync.Sync.Notice.LoginError)
        {
            NotificationColor = "danger";
        }
        else if (notice == CloudSync.Sync.Notice.Authentication || notice == CloudSync.Sync.Notice.LoggedOut)
            NotificationColor = "alert-warning";
        else
        {
            NotificationColor = "alert-success";
        }
    }

    void OnLocalSyncStatusChanges(CloudSync.Sync.SyncStatus localSyncStatus, int pendingFiles)
    {
        SyncStatus = localSyncStatus.ToString();
        if (localSyncStatus == CloudSync.Sync.SyncStatus.Monitoring)
        {
            localSyncStatusColor = "alert-success";
        }
        else
        {
            localSyncStatusColor = "alert-primary";
        }
    }

    void OnCommunicationErrorEvent(CommunicationChannel.Channel.ErrorType errorId, string description)
    {
        ErrorCommunicationTime = DateTime.UtcNow;
        ErrorCommunication = errorId.ToString() + " (" + description + ")";
        Static.Client?.AddFileError(ErrorCommunication, null);
    }
}

@code {
    public Login()
    {
        Status = Static.Client == null ? null : Static.Client.Status;
        StartRefreshStatus();
    }
    string? Status;
    string? OldStatus;
    static CloudClient.Client.LoginResult LoginResult;
    static bool LoginIsRunning;
    static string? Notification;
    static string? NotificationColor;
    static string? SyncStatus;
    static string? localSyncStatusColor;

    static string? ErrorCommunication;
    static DateTime ErrorCommunicationTime;

    string TxtType = "password";

    public bool passphraseShow { get; set; }
    public bool UseMyPassphrase { get; set; } = true;

    public string QR { get; set; } //   CloudClient.QrCodeDetector.QrDetected;
    public string Pin { get; set; } // System.Diagnostics.Debugger.IsAttached ? "777777" : "";
    public string Passphrase { get; set; }
    string? customAlert { get; set; }

    private void HandleValidSubmit()
    {
        byte[]? zeroKnowledgeEncryptionMasterKey = null;
        if (passphraseShow && !string.IsNullOrEmpty(Passphrase)){
            try
            {
                var key = Static.GenerateKeyFromPassphrase(Passphrase);
                zeroKnowledgeEncryptionMasterKey = key.PrivateKey.ToBytes();
            }
            catch (Exception)
            {
                customAlert = "Invalid passphrase!";
                // InvokeAsync(StateHasChanged);
                return;
            }
        }
        Status = null;
        Notification = null;
        SyncStatus = null;
        LoginResult = CloudClient.Client.LoginResult.Successful; // reset previous login message
        InvokeAsync(StateHasChanged);
        System.Threading.Tasks.Task.Run(() =>
        {
            var pin = Pin.Trim();
            LoginIsRunning = true;
            InvokeAsync(StateHasChanged);
            if (pin.Contains(' '))
            {
                var passphrase = pin;
                LoginResult = Static.Restore(QR, passphrase);
            }
            else
            {
                LoginResult = Static.Login(QR, pin, zeroKnowledgeEncryptionMasterKey);
            }
            if (LoginResult != CloudClient.Client.LoginResult.Successful)
                Logout();
            LoginIsRunning = false;
            InvokeAsync(StateHasChanged);
        });
    }
}

@page "/signatureValidation"

<PageTitle>Digital signature validation</PageTitle>

<h1>Verification of the digital signature related to a document</h1>

<br />
<div class="form-group m-3">
    <label for="myfile">Select the PDF document that has been signed:</label>
    <InputFile OnChange="@LoadFiles" accept=".pdf" multiple />
</div>
@if (DocumentFileName != null)
{
    <div class="form-group m-3">
        <label for="myfile">Select the digitally signed file:</label>
        <InputFile OnChange="@CheckSignature" accept=".sign" multiple />
    </div>
}
<br />

@if (Sign != null)
{
    <span class="d-block p-2 bg-primary text-white">Scope of signature: @Sign.ScopeOfSignature</span>
    <span class="d-block p-2 bg-primary text-white">User Id: @Sign.UserId()</span>
    <span class="d-block p-2 bg-primary text-white">Public key: @Sign.PublicKey</span>
    <span class="d-block p-2 bg-primary text-white">Key base64: @Sign.PublicKeyBase64</span>
    <span class="d-block p-2 bg-primary text-white">Blockchain hash block: @Sign.BlockchainHashBlock</span>
    <span class="d-block p-2 bg-primary text-white">Block time: @Sign.BlockTime()</span>
    @if (IsValid)
    {
        <div class="alert alert-success" role="alert">
            The signature is authentic!
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            The signature is invalid!
        </div>
    }
}

@code {
    byte[] file;
    string? DocumentFileName;
    CloudBox.DigitalSignature.Scope Scope;
    CloudBox.DigitalSignature Sign;
    bool IsValid = false;
    //private string SignAccept => DocumentFileName + ".*.sign";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        DocumentFileName = null;
        Sign = null;
        IsValid = false;
        if (Static.Client != null)
            using (var fr = e.File.OpenReadStream(e.File.Size))
            {
                file = new byte[e.File.Size];
                await fr.ReadAsync(file, 0, (int)e.File.Size);
                DocumentFileName = e.File.Name;
            }
    }
    private async Task CheckSignature(InputFileChangeEventArgs e)
    {
        using (var fr = e.File.OpenReadStream(e.File.Size))
        {
            var data = new byte[e.File.Size];
            await fr.ReadAsync(data, 0, (int)e.File.Size);
            var json = Bytes.ToASCII(data);
            Sign = CloudBox.DigitalSignature.Load(json);
            IsValid = Sign.Validate(file);
            var SignatureFileName = e.File.Name;
            if (!SignatureFileName.StartsWith(DocumentFileName) || SignatureFileName.IndexOf(Sign.UserId().ToString()) == -1)
                IsValid = false;
        }
    }
}
